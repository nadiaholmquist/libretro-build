#!/bin/bash

set -o errexit
set -o pipefail

if [[ $# -lt 1 ]]; then
	echo "Usage: $0 <corename> [clean]"
	exit 1
fi

pushd () {
	command pushd "$@" > /dev/null
}

popd () {
	command popd "$@" > /dev/null
}

msg() {
	echo -e "\e[1m$@\e[0m"
}

func_exists() {
	declare -F "$1" > /dev/null
}

run_step() {
	func_exists "$1" || return 0

	pushd .
	msg "$2"
	if [[ $1 != "fetch" ]]; then
		cd "build/$core_name"
	fi
	$1
	popd
}

core_dir=$HOME/.config/retroarch/cores/

core_name=$1
make_flags=()
makefile=
makefile_dir=
makefile_flags=()
cmake_build_dir=build
cmake_flags=(-DCMAKE_BUILD_TYPE=Release -DBUILD_LIBRETRO=ON)
core_filename=
dest_filename=
git_url=
git_branch=
no_submodules=0
build_system=make
CFLAGS="-march=native -mtune=native"
CXXFLAGS="-march=native -mtune=native"

if [[ ! -e "cores/$core_name" ]]; then
	echo "No build file for $core_name in cores/."
	exit 1
fi

fetch() {
	if [[ ! -e "build/$core_name" ]]; then
		if [[ $no_submodules -eq 0 ]]; then
			git clone --recursive "$git_url" "build/$core_name"
		else
			git clone "$git_url" "build/$core_name"
		fi
	fi

	cd "build/$core_name"
	git fetch origin

	if [[ $git_branch == "" ]]; then
		tag=$(git describe --tags $(git rev-list --tags --max-count=1))
		git checkout "$tag"
	else
		git checkout origin/"$git_branch"
	fi

	if [[ $no_submodules -eq 0 ]]; then
		git submodule update --init --recursive
	fi
}

source "cores/$core_name"

if [[ "$makefile" != "" ]]; then
	makefile_flags+=(-f "$makefile")
fi
if [[ "$makefile_dir" != "" ]]; then
	makefile_flags+=(-C "$makefile_dir")
fi

func_exists build || build() {
	case "$build_system" in
		make)
			make "${makefile_flags[@]}" "${make_flags[@]}" -j$(nproc)
			;;
		cmake)
			cmake -B "$cmake_build_dir" "${cmake_flags[@]}"
			cmake --build "$cmake_build_dir" -j$(nproc)
			;;
	esac
}

func_exists clean || clean() {
	case "$build_system" in
		make) make "${makefile_flags[@]}" clean ;;
		cmake) make -C "$cmake_build_dir" clean ;;
	esac
}

if [[ $2 == "clean" ]]; then
	run_step clean "Cleaning build files..."
	exit 0
fi

run_step fetch "Fetching sources..."
run_step prepare "Preparing build..."
run_step build "Building..."

if [[ $core_filename == "" ]]; then
	if [[ "$dest_filename" == "" ]]; then
		dest_filename="${core_name}_libretro.so"
	fi
	mapfile -t binary < <(find "build/$core_name" -name "${core_name}_libretro.so")
	if [[ "${#binary[@]}" -eq 0 ]]; then
		msg "Expected binary $core_name was not found."
		exit 1
	fi
	cp "${binary[0]}" "$core_dir/$dest_filename"
else
	if [[ "$dest_filename" == "" ]]; then
		dest_filename="$(basename "$core_filename")"
	fi
	cp "build/$core_name/$core_filename" "$core_dir/$dest_filename"
fi
msg "Done."
